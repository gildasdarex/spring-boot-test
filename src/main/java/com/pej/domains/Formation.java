package com.pej.domains;
// Generated 30 oct. 2016 22:13:12 by Hibernate Tools 5.2.0.Beta1


import java.io.Serializable;

import java.util.*;
import javax.persistence.*;

import com.pej.domains.Formateur;
import com.pej.domains.Formationbeneficaire;
import com.pej.domains.Typeformation;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.format.annotation.DateTimeFormat;

/**
 * Formation generated by hbm2java
 */
@Entity
@Table(name = "FORMATION")
public class Formation implements java.io.Serializable {
	Logger logger = LogManager.getLogger(Formation.class);

	private Integer idformation;
	private Typeformation typeformation;
	private List<Formateur> formateurSet = new ArrayList<Formateur>();
	private Date dateformation;
	private Date datefin;
	private String heuredebut;
	private String heurefin;
	private String remarque;
	private Integer idgroupe;
	private String intitule;
	private String formateurs;
	private String formateurSecondaire;
	private String phase;
	private Set<Formationbeneficaire> formationbeneficaires = new HashSet<Formationbeneficaire>(0);
	private Set<Presence> presences = new HashSet<Presence>(0);
	private Set<Formationlot> formationlots = new HashSet<Formationlot>(0);
	private Set<Formationcooperative> formationcooperatives = new HashSet<Formationcooperative>(0);
	public Formation() {
	}


    @Id 
  	@GeneratedValue(generator = "SEQ_IDFORMATION", strategy = GenerationType.SEQUENCE)
  	@SequenceGenerator(name = "SEQ_IDFORMATION", sequenceName = "SEQ_IDFORMATION",allocationSize=1)
    @Column(name="IDFORMATION", unique=true, nullable=false, precision=22, scale=0)
    public Integer getIdformation() {
        return this.idformation;
    }
    
    public void setIdformation(Integer idformation) {
		this.idformation = idformation;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDTYPEFORMATION")
	public Typeformation getTypeformation() {
		return this.typeformation;
	}

	public void setTypeformation(Typeformation typeformation) {
		this.typeformation = typeformation;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "formations")
	public List<Formateur> getFormateurSet() {
		return this.formateurSet;
	}

	public void setFormateurSet(List<Formateur> formateurSet) {
		this.formateurSet = formateurSet;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATEFORMATION", length = 7)
	public Date getDateformation() {
		return this.dateformation;
	}

	public void setDateformation(Date dateformation) {
		this.dateformation = dateformation;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "DATEFIN", length = 7)
	public Date getDatefin() {
		return this.datefin;
	}

	public void setDatefin(Date datefin) {
		this.datefin = datefin;
	}

	@Column(name = "HEUREDEBUT", length = 1024)
	public String getHeuredebut() {
		return this.heuredebut;
	}

	public void setHeuredebut(String heuredebut) {
		this.heuredebut = heuredebut;
	}

	@Column(name = "HEUREFIN", length = 1024)
	public String getHeurefin() {
		return this.heurefin;
	}

	public void setHeurefin(String heurefin) {
		this.heurefin = heurefin;
	}

	@Column(name = "REMARQUE")
	public String getRemarque() {
		return this.remarque;
	}

	public void setRemarque(String remarque) {
		this.remarque = remarque;
	}

	@Column(name = "IDGROUPE", precision = 22, scale = 0)
	public Integer getIdgroupe() {
		return this.idgroupe;
	}

	public void setIdgroupe(Integer idgroupe) {
		this.idgroupe = idgroupe;
	}

	@Column(name = "INTITULE", length = 1024)
	public String getIntitule() {
		return this.intitule;
	}

	public void setIntitule(String intitule) {
		this.intitule = intitule;
	}
	
	@Column(name = "PHASE", length = 1024)
	public String getPhase() {
		return phase;
	}

	public void setPhase(String phase) {
		this.phase = phase;
	}

	@Transient
	public String getFormateurs() {
		return formateurs;
	}

	public void setFormateurs(String formateurs) {
		this.formateurs = formateurs;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "formation")
	public Set<Formationbeneficaire> getFormationbeneficaires() {
		return this.formationbeneficaires;
	}

	public void setFormationbeneficaires(Set<Formationbeneficaire> formationbeneficaires) {
		this.formationbeneficaires = formationbeneficaires;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "formation")
	public Set<Presence> getPresences() {
		return this.presences;
	}

	public void setPresences(Set<Presence> presences) {
		this.presences = presences;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "formation")
	public Set<Formationlot> getFormationlots() {
		return this.formationlots;
	}

	public void setFormationlots(Set<Formationlot> formationlots) {
		this.formationlots = formationlots;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "formation")
	public Set<Formationcooperative> getFormationcooperatives() {
		return this.formationcooperatives;
	}

	public void setFormationcooperatives(Set<Formationcooperative> formationcooperatives) {
		this.formationcooperatives = formationcooperatives;
	}

    @Transient
	public List<Date> getFormationDates(){
		Calendar start = Calendar.getInstance();
		List<Date> dates = new ArrayList<>();
		start.setTime(this.dateformation);

		dates.add(start.getTime());

		while (start.getTime().before(this.datefin)) {
			start.add(Calendar.DATE, 1);
			dates.add(start.getTime());
		}

		return dates;
	}


	@Transient
	public String getFormateurNames(){
		String names = " ";
		for(Formateur formateur : formateurSet){
			names = names + formateur.getIdentite() + ". ";
		}

		return names;
	}

}
